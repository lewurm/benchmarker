-- -*- sql -*-

create schema "1";

create view "1".benchmark as
select * from benchmark;

create view "1".config as
select * from config;

create view "1".machine as
select * from machine;

create view "1".parseobjectid as
select * from parseobjectid;

create view "1".commit as
select * from commit;

create view "1".summary as
select results.runset as rs_id, rs.machine as rs_machine, rs.config as rs_config, rs.pullrequest as rs_pullrequest, rs.startedAt as rs_startedAt, rs.timedOutBenchmarks as rs_timedoutBenchmarks, rs.crashedBenchmarks as rs_crashedBenchmarks,
       c.hash as c_hash, c.commitDate as c_commitDate, c.product as c_product,
       m.name as m_name, m.architecture as m_architecture, m.isdedicated as m_isdedicated,
       cfg.name as cfg_name, cfg.monoexecutable as cfg_monoexecutable, cfg.monoenvironmentvariables as cfg_monoenvironmentvariables, cfg.monooptions as cfg_monooptions,
       results.metric, results.averages, results.variances from (
select x.runset, x.metric, json_object_agg(x.benchmark, x.avg) as averages, json_object_agg(x.benchmark, x.var_pop) as variances
from (
select r.runset, rm.metric, r.benchmark, avg(rm.result), var_pop(rm.result)
from run r, runmetric rm, benchmark b
where r.id = rm.run and r.benchmark = b.name and b.disabled is not true and rm.result is not null
group by r.runset, r.benchmark, rm.metric
) as x
group by runset, metric
) as results,
runset rs, commit c, machine m, config cfg
where results.runset = rs.id and rs.commit = c.hash and rs.machine = m.name and rs.config = cfg.name;

create or replace view "1".runset as
select c.hash as c_hash, c.commitdate as c_commitdate, c.product as c_product,
       rs.id as rs_id, rs.startedat as rs_startedat, rs.finishedat as rs_finishedat, rs.buildurl as rs_buildurl, rs.logurls as rs_logurls, rs.commit as rs_commit, rs.machine as rs_machine, rs.config as rs_config, rs.timedoutbenchmarks as rs_timedoutbenchmarks, rs.crashedbenchmarks as rs_crashedbenchmarks, rs.secondarycommits as rs_secondarycommits,
       m.name as m_name, m.architecture as m_architecture, m.isdedicated as m_isdedicated,
       cfg.name as cfg_name, cfg.monoexecutable as cfg_monoexecutable, cfg.monoenvironmentvariables as cfg_monoenvironmentvariables, cfg.monooptions as cfg_monooptions
from runset rs, commit c, machine m, config cfg
where rs.commit = c.hash and rs.machine = m.name and rs.config = cfg.name;

create view "1".runsetcount as
select array_agg(rs.id) as ids,
       m.name as m_name, m.architecture as m_architecture, m.isdedicated as m_isdedicated,
       cfg.name as cfg_name, cfg.monoexecutable as cfg_monoexecutable, cfg.monoenvironmentvariables as cfg_monoenvironmentvariables, cfg.monooptions as cfg_monooptions,
       rs.metric
from (select distinct irs.id, rm.metric, irs.machine, irs.config
      from runset irs, run r, runmetric rm
      where irs.pullrequest is null and rm.run = r.id and r.runset = irs.id) rs,
     machine m, config cfg
where rs.machine = m.name and rs.config = cfg.name
group by rs.metric, m.name, m.architecture, m.isdedicated, cfg.name, cfg.monoexecutable, cfg.monoenvironmentvariables, cfg.monooptions;

create view "1".results as
select r.runset, r.benchmark, b.disabled, rm.metric, array_agg(rm.result) as results
from run r, runmetric rm, benchmark b
where rm.run = r.id and r.benchmark = b.name and rm.result is not null
group by r.runset, r.benchmark, rm.metric, b.disabled;

create view "1".resultarrays as
select rs.id as rs_id, rs.machine as rs_machine, rs.config as rs_config, rs.pullrequest as rs_pullrequest, rs.startedAt as rs_startedAt, rs.timedOutBenchmarks as rs_timedoutBenchmarks, rs.crashedBenchmarks as rs_crashedBenchmarks,
		r.benchmark, b.disabled, rm.metric, rm.resultarray,
       c.hash as c_hash, c.commitDate as c_commitDate, c.product as c_product
from run r, runmetric rm, benchmark b, runset rs, commit c
where rs.commit = c.hash and r.runset = rs.id and rm.run = r.id and r.benchmark = b.name and rm.resultarray is not null;

create view "1".resultarraybenchmarks as
select distinct r.benchmark, b.disabled, rm.metric, rs.machine, rs.config
from run r, runmetric rm, benchmark b, runset rs
where r.runset = rs.id and rm.run = r.id and r.benchmark = b.name and rm.resultarray is not null;

create view "1".pullrequest as
select pr.id as pr_id, pr.url as pr_url,
       blrs.id as blrs_id, blrs.startedAt as blrs_startedAt, blrs.finishedAt as blrs_finishedAt, blrs.buildURL as blrs_buildURL, blrs.logURLs as blrs_logURLs, blrs.commit as blrs_commit, blrs.machine as blrs_machine, blrs.config as blrs_config, blrs.timedOutBenchmarks as blrs_timedOutBenchmarks, blrs.crashedBenchmarks as blrs_crashedBenchmarks,
       prrs.id as prrs_id, prrs.startedAt as prrs_startedAt, prrs.finishedAt as prrs_finishedAt, prrs.buildURL as prrs_buildURL, prrs.logURLs as prrs_logURLs, prrs.commit as prrs_commit, prrs.machine as prrs_machine, prrs.config as prrs_config, prrs.timedOutBenchmarks as prrs_timedOutBenchmarks, prrs.crashedBenchmarks as prrs_crashedBenchmarks,
       blc.hash as blc_hash, blc.commitDate as blc_commitDate,
       prc.hash as prc_hash, prc.commitDate as prc_commitDate,
       m.name as m_name, m.architecture as m_architecture, m.isdedicated as m_isdedicated,
       cfg.name as cfg_name, cfg.monoexecutable as cfg_monoexecutable, cfg.monoenvironmentvariables as cfg_monoenvironmentvariables, cfg.monooptions as cfg_monooptions
from pullrequest as pr, runset as blrs, runset as prrs, commit as blc, commit as prc, machine as m, config cfg
where pr.baselinerunset = blrs.id and prrs.pullrequest = pr.id and blc.hash = blrs.commit and prc.hash = prrs.commit and blrs.machine = m.name and blrs.config = cfg.name;

create view "1".featuredtimelines as
select * from featuredtimelines;

create user $POSTGREST_USER login encrypted password '$POSTGREST_PASSWORD';
grant usage on schema "1" to $POSTGREST_USER;
grant select on all tables in schema "1" to $POSTGREST_USER;

grant usage on schema "1" to $BENCHMARKER_USER;
grant select on all tables in schema "1" to $BENCHMARKER_USER;
